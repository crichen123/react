{"ast":null,"code":"import \"antd/es/modal/style/css\";\nimport _Modal from \"antd/es/modal\";\nimport \"antd/es/upload/style/css\";\nimport _Upload from \"antd/es/upload\";\nimport \"antd/es/icon/style/css\";\nimport _Icon from \"antd/es/icon\";\nimport \"antd/es/message/style/css\";\nimport _message from \"antd/es/message\";\nvar _jsxFileName = \"/home/crc/WebstormProjects/react-admin/src/pages/product/Pictures-wall.jsx\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { reqDeleteImg } from \"../../api\";\nimport { BASE_IMG_URL } from \"../../utils/constant\";\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = () => resolve(reader.result);\n\n    reader.onerror = error => reject(error);\n  });\n}\n\nexport default class PicturesWall extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getImgs = () => {\n      return this.state.fileList.map(file => file.name);\n    };\n\n    this.handleCancel = () => this.setState({\n      previewVisible: false\n    });\n\n    this.handlePreview = async file => {\n      if (!file.url && !file.preview) {\n        file.preview = await getBase64(file.originFileObj);\n      }\n\n      this.setState({\n        previewImage: file.url || file.preview,\n        previewVisible: true\n      });\n    };\n\n    this.handleChange = async ({\n      file,\n      fileList\n    }) => {\n      if (file.status === 'done') {\n        const result = file.response;\n\n        if (result.status === 0) {\n          _message.success('上传成功');\n\n          const {\n            name,\n            url\n          } = result.data;\n          file = fileList[fileList.length - 1];\n          file.name = name;\n          file.url = url;\n        } else {\n          _message.error(\"上传失败\");\n        }\n      } else if (file.status === 'removed') {\n        const result = await reqDeleteImg(file.name);\n\n        if (result.status === 0) {\n          _message.success(\"删除成功\");\n        } else {\n          _message.error(\"删除失败\");\n        }\n      }\n\n      this.setState({\n        fileList\n      });\n    };\n\n    let _fileList = [];\n    const {\n      imgs\n    } = this.props;\n\n    if (imgs && imgs.length > 0) {\n      _fileList = imgs.map((img, index) => ({\n        uid: -index,\n        name: img,\n        status: 'done',\n        url: BASE_IMG_URL + img\n      }));\n    }\n\n    console.log(1111);\n    console.log(_fileList);\n    this.state = {\n      previewVisible: false,\n      previewImage: '',\n      fileList: _fileList\n    };\n  }\n\n  render() {\n    const {\n      previewVisible,\n      previewImage,\n      fileList\n    } = this.state;\n    const uploadButton = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(_Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ant-upload-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Upload\"));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(_Upload, {\n      accept: \"image/*\",\n      action: \"/users/upload\",\n      listType: \"picture-card\",\n      fileList: fileList,\n      name: \"image\",\n      onPreview: this.handlePreview,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, fileList.length >= 3 ? null : uploadButton), React.createElement(_Modal, {\n      visible: previewVisible,\n      footer: null,\n      onCancel: this.handleCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      alt: \"example\",\n      style: {\n        width: '100%'\n      },\n      src: previewImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })));\n  }\n\n}\nPicturesWall.protypes = {\n  imgs: PropTypes.array\n};","map":{"version":3,"sources":["/home/crc/WebstormProjects/react-admin/src/pages/product/Pictures-wall.jsx"],"names":["React","PropTypes","reqDeleteImg","BASE_IMG_URL","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","PicturesWall","Component","constructor","props","getImgs","state","fileList","map","name","handleCancel","setState","previewVisible","handlePreview","url","preview","originFileObj","previewImage","handleChange","status","response","success","data","length","imgs","img","index","uid","console","log","render","uploadButton","width","protypes","array"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport PropTypes from \"prop-types\"\nimport { Upload, Icon, Modal, message } from 'antd';\nimport {reqDeleteImg} from \"../../api\"\nimport {BASE_IMG_URL} from \"../../utils/constant\"\n\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nexport default  class PicturesWall extends React.Component {\n\n\n  static protypes = {\n    imgs:PropTypes.array\n  }\n\n  constructor(props) {\n    super(props);\n    let fileList = [];\n    const {imgs} = this.props\n    if(imgs && imgs.length>0){\n      fileList =imgs.map(\n          (img,index)=>({\n\n              uid:-index,\n                  name:img,\n                status:'done',\n                url:BASE_IMG_URL + img\n\n          }))\n    }\n    console.log(1111);\n    console.log(fileList);\n    this.state = {\n      previewVisible: false,\n      previewImage: '',\n      fileList: fileList,\n    }\n  }\n\n  getImgs = () =>{\n    return this.state.fileList.map(file=>file.name)\n  }\n\n  handleCancel = () => this.setState({ previewVisible: false });\n\n  handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    this.setState({\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n    });\n  };\n\n  handleChange = async({file, fileList }) => {\n    if(file.status === 'done'){\n      const result = file.response\n      if(result.status ===0){\n        message.success('上传成功')\n        const {name,url} = result.data\n        file = fileList[fileList.length-1]\n        file.name = name\n        file.url = url\n      }else{\n        message.error(\"上传失败\")\n      }\n    }else if(file.status === 'removed'){\n      const result =await  reqDeleteImg(file.name)\n      if(result.status === 0){\n        message.success(\"删除成功\")\n      }else{\n        message.error(\"删除失败\")\n      }\n    }\n    this.setState({ fileList })\n  };\n\n  render() {\n    const { previewVisible, previewImage, fileList } = this.state;\n    const uploadButton = (\n      <div>\n        <Icon type=\"plus\" />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n    return (\n      <div>\n        <Upload\n          accept=\"image/*\"\n          action=\"/users/upload\"\n          listType=\"picture-card\"\n          fileList={fileList}\n          name=\"image\"\n          onPreview={this.handlePreview}\n          onChange={this.handleChange}\n        >\n          {fileList.length >= 3 ? null : uploadButton}\n        </Upload>\n        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n      </div>\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}